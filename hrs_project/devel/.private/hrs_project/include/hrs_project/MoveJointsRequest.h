// Generated by gencpp from file hrs_project/MoveJointsRequest.msg
// DO NOT EDIT!


#ifndef HRS_PROJECT_MESSAGE_MOVEJOINTSREQUEST_H
#define HRS_PROJECT_MESSAGE_MOVEJOINTSREQUEST_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace hrs_project
{
template <class ContainerAllocator>
struct MoveJointsRequest_
{
  typedef MoveJointsRequest_<ContainerAllocator> Type;

  MoveJointsRequest_()
    : joint_name()
    , end_effector()
    , goal_6Dposition_Marker()
    , goal_6Dposition_Cloth()
    , goal_6Dposition()
    , SpeedorTime(0.0)
    , axisMask(0.0)
    , control_mod(0)
    , getMarker(false)
    , getMarker_Ground(false)
    , cloth_color()  {
    }
  MoveJointsRequest_(const ContainerAllocator& _alloc)
    : joint_name(_alloc)
    , end_effector(_alloc)
    , goal_6Dposition_Marker(_alloc)
    , goal_6Dposition_Cloth(_alloc)
    , goal_6Dposition(_alloc)
    , SpeedorTime(0.0)
    , axisMask(0.0)
    , control_mod(0)
    , getMarker(false)
    , getMarker_Ground(false)
    , cloth_color(_alloc)  {
  (void)_alloc;
    }



   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _joint_name_type;
  _joint_name_type joint_name;

   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _end_effector_type;
  _end_effector_type end_effector;

   typedef std::vector<double, typename ContainerAllocator::template rebind<double>::other >  _goal_6Dposition_Marker_type;
  _goal_6Dposition_Marker_type goal_6Dposition_Marker;

   typedef std::vector<double, typename ContainerAllocator::template rebind<double>::other >  _goal_6Dposition_Cloth_type;
  _goal_6Dposition_Cloth_type goal_6Dposition_Cloth;

   typedef std::vector<double, typename ContainerAllocator::template rebind<double>::other >  _goal_6Dposition_type;
  _goal_6Dposition_type goal_6Dposition;

   typedef double _SpeedorTime_type;
  _SpeedorTime_type SpeedorTime;

   typedef double _axisMask_type;
  _axisMask_type axisMask;

   typedef int8_t _control_mod_type;
  _control_mod_type control_mod;

   typedef uint8_t _getMarker_type;
  _getMarker_type getMarker;

   typedef uint8_t _getMarker_Ground_type;
  _getMarker_Ground_type getMarker_Ground;

   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _cloth_color_type;
  _cloth_color_type cloth_color;





  typedef boost::shared_ptr< ::hrs_project::MoveJointsRequest_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::hrs_project::MoveJointsRequest_<ContainerAllocator> const> ConstPtr;

}; // struct MoveJointsRequest_

typedef ::hrs_project::MoveJointsRequest_<std::allocator<void> > MoveJointsRequest;

typedef boost::shared_ptr< ::hrs_project::MoveJointsRequest > MoveJointsRequestPtr;
typedef boost::shared_ptr< ::hrs_project::MoveJointsRequest const> MoveJointsRequestConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::hrs_project::MoveJointsRequest_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::hrs_project::MoveJointsRequest_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace hrs_project

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': False, 'IsMessage': True, 'HasHeader': False}
// {'std_msgs': ['/opt/ros/kinetic/share/std_msgs/cmake/../msg'], 'actionlib_msgs': ['/opt/ros/kinetic/share/actionlib_msgs/cmake/../msg'], 'hrs_project': ['/home/nao_a/ros/hrs_project/devel/.private/hrs_project/share/hrs_project/msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::hrs_project::MoveJointsRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::hrs_project::MoveJointsRequest_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::hrs_project::MoveJointsRequest_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::hrs_project::MoveJointsRequest_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::hrs_project::MoveJointsRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::hrs_project::MoveJointsRequest_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::hrs_project::MoveJointsRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "83ee43bf529a242f799bbf5126b68060";
  }

  static const char* value(const ::hrs_project::MoveJointsRequest_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x83ee43bf529a242fULL;
  static const uint64_t static_value2 = 0x799bbf5126b68060ULL;
};

template<class ContainerAllocator>
struct DataType< ::hrs_project::MoveJointsRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "hrs_project/MoveJointsRequest";
  }

  static const char* value(const ::hrs_project::MoveJointsRequest_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::hrs_project::MoveJointsRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "\n\
string joint_name\n\
string end_effector\n\
float64[] goal_6Dposition_Marker\n\
float64[] goal_6Dposition_Cloth\n\
float64[] goal_6Dposition\n\
\n\
float64 SpeedorTime\n\
float64 axisMask\n\
int8 control_mod\n\
bool getMarker\n\
bool getMarker_Ground\n\
\n\
string cloth_color\n\
";
  }

  static const char* value(const ::hrs_project::MoveJointsRequest_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::hrs_project::MoveJointsRequest_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.joint_name);
      stream.next(m.end_effector);
      stream.next(m.goal_6Dposition_Marker);
      stream.next(m.goal_6Dposition_Cloth);
      stream.next(m.goal_6Dposition);
      stream.next(m.SpeedorTime);
      stream.next(m.axisMask);
      stream.next(m.control_mod);
      stream.next(m.getMarker);
      stream.next(m.getMarker_Ground);
      stream.next(m.cloth_color);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct MoveJointsRequest_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::hrs_project::MoveJointsRequest_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::hrs_project::MoveJointsRequest_<ContainerAllocator>& v)
  {
    s << indent << "joint_name: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.joint_name);
    s << indent << "end_effector: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.end_effector);
    s << indent << "goal_6Dposition_Marker[]" << std::endl;
    for (size_t i = 0; i < v.goal_6Dposition_Marker.size(); ++i)
    {
      s << indent << "  goal_6Dposition_Marker[" << i << "]: ";
      Printer<double>::stream(s, indent + "  ", v.goal_6Dposition_Marker[i]);
    }
    s << indent << "goal_6Dposition_Cloth[]" << std::endl;
    for (size_t i = 0; i < v.goal_6Dposition_Cloth.size(); ++i)
    {
      s << indent << "  goal_6Dposition_Cloth[" << i << "]: ";
      Printer<double>::stream(s, indent + "  ", v.goal_6Dposition_Cloth[i]);
    }
    s << indent << "goal_6Dposition[]" << std::endl;
    for (size_t i = 0; i < v.goal_6Dposition.size(); ++i)
    {
      s << indent << "  goal_6Dposition[" << i << "]: ";
      Printer<double>::stream(s, indent + "  ", v.goal_6Dposition[i]);
    }
    s << indent << "SpeedorTime: ";
    Printer<double>::stream(s, indent + "  ", v.SpeedorTime);
    s << indent << "axisMask: ";
    Printer<double>::stream(s, indent + "  ", v.axisMask);
    s << indent << "control_mod: ";
    Printer<int8_t>::stream(s, indent + "  ", v.control_mod);
    s << indent << "getMarker: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.getMarker);
    s << indent << "getMarker_Ground: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.getMarker_Ground);
    s << indent << "cloth_color: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.cloth_color);
  }
};

} // namespace message_operations
} // namespace ros

#endif // HRS_PROJECT_MESSAGE_MOVEJOINTSREQUEST_H
