// Generated by gencpp from file hrs_project/MoveJointsResponse.msg
// DO NOT EDIT!


#ifndef HRS_PROJECT_MESSAGE_MOVEJOINTSRESPONSE_H
#define HRS_PROJECT_MESSAGE_MOVEJOINTSRESPONSE_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace hrs_project
{
template <class ContainerAllocator>
struct MoveJointsResponse_
{
  typedef MoveJointsResponse_<ContainerAllocator> Type;

  MoveJointsResponse_()
    : num(0.0)
    , RosePick_Ready(false)
    , bMarkerArrived(false)
    , speechCommand()  {
    }
  MoveJointsResponse_(const ContainerAllocator& _alloc)
    : num(0.0)
    , RosePick_Ready(false)
    , bMarkerArrived(false)
    , speechCommand(_alloc)  {
  (void)_alloc;
    }



   typedef double _num_type;
  _num_type num;

   typedef uint8_t _RosePick_Ready_type;
  _RosePick_Ready_type RosePick_Ready;

   typedef uint8_t _bMarkerArrived_type;
  _bMarkerArrived_type bMarkerArrived;

   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _speechCommand_type;
  _speechCommand_type speechCommand;





  typedef boost::shared_ptr< ::hrs_project::MoveJointsResponse_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::hrs_project::MoveJointsResponse_<ContainerAllocator> const> ConstPtr;

}; // struct MoveJointsResponse_

typedef ::hrs_project::MoveJointsResponse_<std::allocator<void> > MoveJointsResponse;

typedef boost::shared_ptr< ::hrs_project::MoveJointsResponse > MoveJointsResponsePtr;
typedef boost::shared_ptr< ::hrs_project::MoveJointsResponse const> MoveJointsResponseConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::hrs_project::MoveJointsResponse_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::hrs_project::MoveJointsResponse_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace hrs_project

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': False, 'IsMessage': True, 'HasHeader': False}
// {'std_msgs': ['/opt/ros/kinetic/share/std_msgs/cmake/../msg'], 'actionlib_msgs': ['/opt/ros/kinetic/share/actionlib_msgs/cmake/../msg'], 'hrs_project': ['/home/nao_a/ros/hrs_project/devel/.private/hrs_project/share/hrs_project/msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::hrs_project::MoveJointsResponse_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::hrs_project::MoveJointsResponse_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::hrs_project::MoveJointsResponse_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::hrs_project::MoveJointsResponse_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::hrs_project::MoveJointsResponse_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::hrs_project::MoveJointsResponse_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::hrs_project::MoveJointsResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "ba6f0325e3a676f603e6569a23450230";
  }

  static const char* value(const ::hrs_project::MoveJointsResponse_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xba6f0325e3a676f6ULL;
  static const uint64_t static_value2 = 0x03e6569a23450230ULL;
};

template<class ContainerAllocator>
struct DataType< ::hrs_project::MoveJointsResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "hrs_project/MoveJointsResponse";
  }

  static const char* value(const ::hrs_project::MoveJointsResponse_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::hrs_project::MoveJointsResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "\n\
\n\
float64 num\n\
bool RosePick_Ready\n\
bool bMarkerArrived\n\
string speechCommand\n\
\n\
\n\
";
  }

  static const char* value(const ::hrs_project::MoveJointsResponse_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::hrs_project::MoveJointsResponse_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.num);
      stream.next(m.RosePick_Ready);
      stream.next(m.bMarkerArrived);
      stream.next(m.speechCommand);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct MoveJointsResponse_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::hrs_project::MoveJointsResponse_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::hrs_project::MoveJointsResponse_<ContainerAllocator>& v)
  {
    s << indent << "num: ";
    Printer<double>::stream(s, indent + "  ", v.num);
    s << indent << "RosePick_Ready: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.RosePick_Ready);
    s << indent << "bMarkerArrived: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.bMarkerArrived);
    s << indent << "speechCommand: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.speechCommand);
  }
};

} // namespace message_operations
} // namespace ros

#endif // HRS_PROJECT_MESSAGE_MOVEJOINTSRESPONSE_H
